# Example YAML to get you started quickly.
# Be aware that YAML has indentation based coping.
# Code completion support is available so start typing for available options.
swagger: '2.0'
# This is your document metadata
info:
  version: "1.0.0"
  title: Airport Security Checkpoints
  description: This API can be used to process security queue length image data, as well as setting and getting the queue status for any security checkpoint.
host:
  tyayers-eval-prod.apigee.net
basePath:
  /airport/security
schemes:
  - https
securityDefinitions:
  APIKey:
    type: apiKey
    in: query
    name: apikey
security:
  - APIKey: []
paths:
  /vision:
    post:
      summary: Analyzes the posted image using cloud vision AI and returns the labels and scores of the objects found in the image. 
      parameters:
        - in: body
          description: The image that should be analyzed
          name: image
          required: true
          schema:
            $ref: '#/definitions/ImageRequest'
        - in: query
          description: The engine that should be used for the image analysis
          name: engine
          type: string
          default: cloudvision
          enum: [cloudvision, amlvision]
          required: false
      responses:
        '200':
          $ref: '#/definitions/ImageResponse'
  /cloudvision:
    post:
      summary: Analyzes the posted image using cloud vision AI and returns the labels and scores of the objects found in the image. This is identical to calling the vision api with query parameter engine=cloudvision
      parameters:
        - in: body
          description: The image that should be analyzed
          name: image
          required: true
          schema:
            $ref: '#/definitions/ImageRequest'
      responses:
        '200':
          $ref: '#/definitions/ImageResponse'   
  /amlvision:
    post:
      summary: Analyzes the posted image using cloud vision AI and returns the labels and scores of the objects found in the image. This is identical to calling the vision api with query parameter engine=amlvision
      parameters:
        - in: body
          description: The image that should be analyzed
          name: image
          required: true
          schema:
            $ref: '#/definitions/ImageRequest'
      responses:
        '200':
          $ref: '#/definitions/ImageResponse'
  /checkpoint/{checkpointId}/status:
    get:
      summary: Gets the security checkpoint status for the given checkpointId
      parameters:
        - type: string
          description: The security checkpoint Id
          name: checkpointId
          in: path
          required: true    
      responses:
        200:
          $ref: '#/definitions/CheckpointStatus'
    put:
      summary: Sets the security checkpoint queue status
      parameters:
        - type: string
          description: The security checkpoint Id
          name: checkpointId
          in: path
          required: true    
        - type: string
          description: The status of the security queue length
          name: queueStatus
          in: path
          enum: [high, medium, low]
          required: true
      responses:
        200:
          $ref: '#/definitions/CheckpointStatus'
definitions:
  ImageRequest:
    type: object
    properties:
      requests:
        description: The image container object containing the image
        type: array
        items:
          $ref: '#/definitions/ImageContainer'
  ImageContainer:
    type: object
    properties:
      image:
        $ref: '#/definitions/Image'
  Image:
    type: object
    properties:
      content:
        description: The base64 encoded image to analyze
        type: string
      features:
        description: The features that the image analysis should use
        type: array
        items:
          $ref: '#/definitions/Feature'
  Feature:
    description: The feature object contains the types of features to use for analyzing the iamge.
    type: object
    properties:
      type:
        description: The only valid option to use here is LABEL_DETECTION
        type: string
  ImageResponse:
    type: object
    properties:
      responses:
        description: The image analysis response labels
        type: array
        items:
          $ref: '#/definitions/LabelAnnotations'
  LabelAnnotations:
    type: object
    properties:
      labelAnnotations:
        description: The label annotations from the image analysis
        type: array
        items:
          $ref: '#/definitions/LabelAnnotation'
  LabelAnnotation:
    type: object
    properties:
      mid:
        description: The knowledge graph id of the object, can be used to query the Google Knowledge Graph for more information
        type: string
      description: 
        description: Text description of the object
        type: string
      score:
        description: How accurate the object recognition was
        type: number
        format: float
      topicality:
        description: How topical the object is, relating to the score.
        type: number
        format: float
  CheckpointStatus:
    type: object
    properties:
      checkpointId:
        description: The checkpoint Id
        type: string
      status: 
        description: The queue status for the checkpoint, high being very full, medium moderately full, and low is pretty empty.
        type: string
        enum: [high, medium, low]
      